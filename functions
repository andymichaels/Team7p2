# add your finished functions here
import random

def exploitOnly() -> int:
    # generate random happiness values for each caf to find highest out of the first 3 days
    C1 = random.normalvariate(10, 8)
    C2 = random.normalvariate(15, 6)
    C3 = random.normalvariate(12, 5)

    # create the total and add to it the first three days
    total = C1 + C2 + C3

    # if cafe 1 gave you the highest score, go to that cafe for the remaining days
    if C1 > C2 and C1 > C3:
        # run 297 trials for C1
        i = 0
        while i <= 297:
            C1 = random.normalvariate(10, 8)
            total += C1
            i += 1

    # if cafe 2 gave you the highest score, go to that cafe for the remaining days
    elif C2 > C1 and C2 > C3:
        # run 297 trials for C2
        i = 0
        while i <= 297:
            C2 = random.normalvariate(15, 6)
            total += C2
            i += 1

    # if cafe 3 gave you the highest score, go to that cafe for the remaining days
    elif C3 > C1 and C3 > C2:
        # run 297 trials for C3
        i = 0
        while i <= 297:
            C3 = random.normalvariate(12, 5)
            total += C3
            i += 1

    return total


def exploreOnly() -> list:
    total = 0
    total2 = 0
    total3 = 0
    finaltotal = []
    c = 0
    b = 0
    a = 0

    while c <= 100:
        C1 = random.normalvariate(10, 8)
        total += C1
        c += 1
    while b <= 100:
        C2 = random.normalvariate(15, 6)
        total2 += C2
        b += 1
    while a <= 100:
        C3 = random.normalvariate(12, 5)
        total3 += C3
        a += 1
    finaltotal = total + total2 + total3
    return finaltotal


def eGreedy(e=10) -> int:
    # generate random happiness values for each caf to find highest out of the first 3 days
    C1 = random.normalvariate(10, 8)
    C2 = random.normalvariate(15, 6)
    C3 = random.normalvariate(12, 5)
    total = C1 + C2 + C3

    # generate a random number to determine which cafe is visited
    r = random.random()

    if r < (e / 100):
        c = random.randint(1, 3)
        if c == 1:
            # run 297 trials for C1
            i = 0
            while i <= 297:
                C1 = random.normalvariate(10, 8)
                total += C1
                i += 1
        if c == 2:
            # run 297 trials for C2
            i = 0
            while i <= 297:
                C2 = random.normalvariate(15, 6)
                total += C2
                i += 1
        if c == 3:
            # run 297 trials for C3
            i = 0
            while i <= 297:
                C3 = random.normalvariate(12, 5)
                total += C3
                i += 1
    else:
        if C1 > C2 and C1 > C3:
            # run 297 trials for C1
            i = 0
            while i <= 297:
                C1 = random.normalvariate(10, 8)
                total += C1
                i += 1
        elif C2 > C1 and C2 > C3:
            # run 297 trials for C2
            i = 0
            while i <= 297:
                C2 = random.normalvariate(15, 6)
                total += C2
                i += 1
        elif C3 > C1 and C3 > C2:
            # run 297 trials for C3
            i = 0
            while i <= 297:
                C3 = random.normalvariate(12, 5)
                total += C3
                i += 1

    return total

def simulation(t, e):

    # initial values for num and exploit(variables used in while loop)
    num = 0
    exploit = 0
    explore = 0
    greedy = 0

    # runs each function through the number of trials
    while num < t:
        exploit += exploitOnly()
        explore += exploreOnly()
        greedy += eGreedy(e)
        num += 1

    # finds average happiness by taking by taking variable which
    # in sum of all trials of each function and dividing by amount of trials
    explore_avHap = explore / t
    exploit_avHap = exploit / t
    greedy_avHap = greedy / t

    # finds optimum happiness
    optHappiness = 300 * 15

    # finds total happiness for exploit
    exploit_totHap = 10 + 12 + 15 + 297 * 15
    exploit_totReg = optHappiness - exploit_totHap

    # finds total happiness for explore
    explore_totHap = (10 * 100) + (12 * 100) + (15 * 100)
    explore_totReg = optHappiness - explore_totHap

    # finds total happiness for eGreedy
    num1 = ((100 - e) / 100) * 300
    num2 = ((e / 3) / 100) * 300
    greedy_totHap = (15 * num1) + (15 * num2) + (12 * num2) + (10 * num2)
    greedy_totReg = optHappiness - greedy_totHap

    explore_avReg = optHappiness - explore_avHap
    exploit_avReg = optHappiness - exploit_avHap
    greedy_avReg = optHappiness - greedy_avHap

    # prints all results in table form
    print("Optimum Happiness: ", optHappiness)
    print()
    print("Function Expected ExpRegret Average AveRegret ")
    print("-------- -------- --------- ------- ---------")
    print("Explore: ", int(explore_totHap), "  ", int(explore_totReg), "  ", int(explore_avHap), "  ", int(explore_avReg))
    print("Exploit: ", int(exploit_totHap), "  ", int(exploit_totReg), "  ", int(exploit_avHap), "  ", int(exploit_avReg))
    print("eGreedy: ", int(greedy_totHap), "  ", int(greedy_totReg), "  ", int(greedy_avHap), "  ", int(greedy_avReg))
